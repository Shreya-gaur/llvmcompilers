Reaching definition analysis for Function 'foo':
entry:
0   %y.addr = alloca i32
1   %x.addr = alloca i32
2   %a.addr = alloca i32
3   %n.addr = alloca i32
4   %b.addr = alloca i32
5   %k.addr = alloca i32
6   store i32 0, i32* %y.addr; DUMMY
7   store i32 0, i32* %x.addr; DUMMY
8   store i32 0, i32* %a.addr; DUMMY
9   store i32 0, i32* %n.addr; DUMMY
10   store i32 0, i32* %b.addr; DUMMY
11   store i32 0, i32* %k.addr; DUMMY
12   store i32 %n, i32* %n.addr
13   store i32 %k, i32* %k.addr
14   %k1 = load i32* %k.addr
15   %eq = icmp eq i32 %k1, 0
16   br i1 %eq, label %if.then, label %if.else

if.then:
17   %k3 = load i32* %k.addr
18   %add = add i32 %k3, 2
19   store i32 %add, i32* %a.addr
20   store i32 5, i32* %x.addr
21   br label %if.end

if.end:
22   %a = load i32* %a.addr
23   store i32 %a, i32* %k.addr
24   br label %while.cond

if.else:
25   %k2 = load i32* %k.addr
26   %mul = mul i32 %k2, 2
27   store i32 %mul, i32* %a.addr
28   store i32 0, i32* %x.addr
29   br label %if.end

while.cond:
30   %n4 = load i32* %n.addr
31   %k5 = load i32* %k.addr
32   %lt = icmp slt i32 %k5, %n4
33   br i1 %lt, label %while.body, label %while.end

while.body:
34   store i32 2, i32* %b.addr
35   %k6 = load i32* %k.addr
36   %a7 = load i32* %a.addr
37   %add8 = add i32 %a7, %k6
38   store i32 %add8, i32* %x.addr
39   %b = load i32* %b.addr
40   %a9 = load i32* %a.addr
41   %mul10 = mul i32 %a9, %b
42   store i32 %mul10, i32* %y.addr
43   %k11 = load i32* %k.addr
44   %add12 = add i32 %k11, 1
45   store i32 %add12, i32* %k.addr
46   br label %while.cond

while.end:
47   %y = load i32* %y.addr
48   %x = load i32* %x.addr
49   %a13 = load i32* %a.addr
50   %add14 = add i32 %a13, %x
51   %add15 = add i32 %add14, %y
52   %0 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %add15)
53   ret void

entry:
  IN:
  OUT: 6 7 8 10 12 13
if.then:
  IN: 6 7 8 10 12 13
  OUT: 6 10 12 13 19 20
if.end:
  IN: 6 10 12 13 19 20 27 28
  OUT: 6 10 12 19 20 23 27 28
if.else:
  IN: 6 7 8 10 12 13
  OUT: 6 10 12 13 27 28
while.cond:
  IN: 6 10 12 19 20 23 27 28 34 38 42 45
  OUT: 6 10 12 19 20 23 27 28 34 38 42 45
while.body:
  IN: 6 10 12 19 20 23 27 28 34 38 42 45
  OUT: 12 19 27 34 38 42 45
while.end:
  IN: 6 10 12 19 20 23 27 28 34 38 42 45
  OUT: 6 10 12 19 20 23 27 28 34 38 42 45

