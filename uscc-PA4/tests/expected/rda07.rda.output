Reaching definition analysis for Function 'foo':
entry:
0   %a.addr = alloca i32
1   %j.addr = alloca i32
2   %u3.addr = alloca i32
3   %u2.addr = alloca i32
4   %u1.addr = alloca i32
5   %i.addr = alloca i32
6   %n.addr = alloca i32
7   %m.addr = alloca i32
8   store i32 0, i32* %a.addr; DUMMY
9   store i32 0, i32* %j.addr; DUMMY
10   store i32 0, i32* %u3.addr; DUMMY
11   store i32 0, i32* %u2.addr; DUMMY
12   store i32 0, i32* %u1.addr; DUMMY
13   store i32 0, i32* %i.addr; DUMMY
14   store i32 0, i32* %n.addr; DUMMY
15   store i32 0, i32* %m.addr; DUMMY
16   store i32 %u3, i32* %u3.addr
17   store i32 %u2, i32* %u2.addr
18   store i32 %u1, i32* %u1.addr
19   store i32 %n, i32* %n.addr
20   store i32 %m, i32* %m.addr
21   %m1 = load i32* %m.addr
22   %sub = sub i32 %m1, 1
23   store i32 %sub, i32* %i.addr
24   %n2 = load i32* %n.addr
25   store i32 %n2, i32* %j.addr
26   %u13 = load i32* %u1.addr
27   store i32 %u13, i32* %a.addr
28   br label %while.cond

while.cond:
29   %j = load i32* %j.addr
30   %gt = icmp sgt i32 %j, 0
31   br i1 %gt, label %while.body, label %while.end

while.body:
32   %i = load i32* %i.addr
33   %add = add i32 %i, 1
34   store i32 %add, i32* %i.addr
35   %j4 = load i32* %j.addr
36   %sub5 = sub i32 %j4, 1
37   store i32 %sub5, i32* %j.addr
38   %j6 = load i32* %j.addr
39   %gt7 = icmp sgt i32 %j6, 10
40   br i1 %gt7, label %if.then, label %if.else

while.end:
41   ret void

if.then:
42   %u29 = load i32* %u2.addr
43   store i32 %u29, i32* %a.addr
44   br label %if.end

if.end:
45   br label %while.cond

if.else:
46   %u38 = load i32* %u3.addr
47   store i32 %u38, i32* %i.addr
48   br label %if.end

entry:
  IN:
  OUT: 16 17 18 19 20 23 25 27
while.cond:
  IN: 16 17 18 19 20 23 25 27 34 37 43 47
  OUT: 16 17 18 19 20 23 25 27 34 37 43 47
while.body:
  IN: 16 17 18 19 20 23 25 27 34 37 43 47
  OUT: 16 17 18 19 20 27 34 37 43
while.end:
  IN: 16 17 18 19 20 23 25 27 34 37 43 47
  OUT: 16 17 18 19 20 23 25 27 34 37 43 47
if.then:
  IN: 16 17 18 19 20 27 34 37 43
  OUT: 16 17 18 19 20 34 37 43
if.end:
  IN: 16 17 18 19 20 27 34 37 43 47
  OUT: 16 17 18 19 20 27 34 37 43 47
if.else:
  IN: 16 17 18 19 20 27 34 37 43
  OUT: 16 17 18 19 20 27 37 43 47

