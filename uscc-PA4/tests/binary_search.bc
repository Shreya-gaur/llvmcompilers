; ModuleID = 'binary_search.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.arr = private unnamed_addr constant [5 x i32] [i32 2, i32 3, i32 4, i32 10, i32 40], align 16
@.str = private unnamed_addr constant [32 x i8] c"Element is not present in array\00", align 1
@.str1 = private unnamed_addr constant [31 x i8] c"Element is present at index %d\00", align 1

define i32 @binarySearch(i32* %arr, i32 %l, i32 %r, i32 %x) nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %arr.addr = alloca i32*, align 8
  %l.addr = alloca i32, align 4
  %r.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 8
  store i32 %l, i32* %l.addr, align 4
  store i32 %r, i32* %r.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end8, %entry
  %0 = load i32* %l.addr, align 4
  %1 = load i32* %r.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %l.addr, align 4
  %3 = load i32* %r.addr, align 4
  %4 = load i32* %l.addr, align 4
  %sub = sub nsw i32 %3, %4
  %div = sdiv i32 %sub, 2
  %add = add nsw i32 %2, %div
  store i32 %add, i32* %m, align 4
  %5 = load i32* %m, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32** %arr.addr, align 8
  %arrayidx = getelementptr inbounds i32* %6, i64 %idxprom
  %7 = load i32* %arrayidx, align 4
  %8 = load i32* %x.addr, align 4
  %cmp1 = icmp eq i32 %7, %8
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %9 = load i32* %m, align 4
  store i32 %9, i32* %retval
  br label %return

if.end:                                           ; preds = %while.body
  %10 = load i32* %m, align 4
  %idxprom2 = sext i32 %10 to i64
  %11 = load i32** %arr.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %11, i64 %idxprom2
  %12 = load i32* %arrayidx3, align 4
  %13 = load i32* %x.addr, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %14 = load i32* %m, align 4
  %add6 = add nsw i32 %14, 1
  store i32 %add6, i32* %l.addr, align 4
  br label %if.end8

if.else:                                          ; preds = %if.end
  %15 = load i32* %m, align 4
  %sub7 = sub nsw i32 %15, 1
  store i32 %sub7, i32* %r.addr, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %16 = load i32* %retval
  ret i32 %16
}

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %arr = alloca [5 x i32], align 16
  %n = alloca i32, align 4
  %x = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %retval
  %0 = bitcast [5 x i32]* %arr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @main.arr to i8*), i64 20, i32 16, i1 false)
  store i32 5, i32* %n, align 4
  store i32 10, i32* %x, align 4
  %arraydecay = getelementptr inbounds [5 x i32]* %arr, i32 0, i32 0
  %1 = load i32* %n, align 4
  %sub = sub nsw i32 %1, 1
  %2 = load i32* %x, align 4
  %call = call i32 @binarySearch(i32* %arraydecay, i32 0, i32 %sub, i32 %2)
  store i32 %call, i32* %result, align 4
  %3 = load i32* %result, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str, i32 0, i32 0))
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i32* %result, align 4
  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str1, i32 0, i32 0), i32 %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @printf(i8*, ...)
