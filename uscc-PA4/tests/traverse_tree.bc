; ModuleID = 'traverse_tree.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tNode = type { i32, %struct.tNode*, %struct.tNode* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1

define void @MorrisTraversal(%struct.tNode* %root) nounwind uwtable {
entry:
  %root.addr = alloca %struct.tNode*, align 8
  %current = alloca %struct.tNode*, align 8
  %pre = alloca %struct.tNode*, align 8
  store %struct.tNode* %root, %struct.tNode** %root.addr, align 8
  %0 = load %struct.tNode** %root.addr, align 8
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.end24

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode** %root.addr, align 8
  store %struct.tNode* %1, %struct.tNode** %current, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %2 = load %struct.tNode** %current, align 8
  %cmp1 = icmp ne %struct.tNode* %2, null
  br i1 %cmp1, label %while.body, label %while.end24

while.body:                                       ; preds = %while.cond
  %3 = load %struct.tNode** %current, align 8
  %left = getelementptr inbounds %struct.tNode* %3, i32 0, i32 1
  %4 = load %struct.tNode** %left, align 8
  %cmp2 = icmp eq %struct.tNode* %4, null
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %while.body
  %5 = load %struct.tNode** %current, align 8
  %data = getelementptr inbounds %struct.tNode* %5, i32 0, i32 0
  %6 = load i32* %data, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %6)
  %7 = load %struct.tNode** %current, align 8
  %right = getelementptr inbounds %struct.tNode* %7, i32 0, i32 2
  %8 = load %struct.tNode** %right, align 8
  store %struct.tNode* %8, %struct.tNode** %current, align 8
  br label %if.end23

if.else:                                          ; preds = %while.body
  %9 = load %struct.tNode** %current, align 8
  %left4 = getelementptr inbounds %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode** %left4, align 8
  store %struct.tNode* %10, %struct.tNode** %pre, align 8
  br label %while.cond5

while.cond5:                                      ; preds = %while.body10, %if.else
  %11 = load %struct.tNode** %pre, align 8
  %right6 = getelementptr inbounds %struct.tNode* %11, i32 0, i32 2
  %12 = load %struct.tNode** %right6, align 8
  %cmp7 = icmp ne %struct.tNode* %12, null
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond5
  %13 = load %struct.tNode** %pre, align 8
  %right8 = getelementptr inbounds %struct.tNode* %13, i32 0, i32 2
  %14 = load %struct.tNode** %right8, align 8
  %15 = load %struct.tNode** %current, align 8
  %cmp9 = icmp ne %struct.tNode* %14, %15
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond5
  %16 = phi i1 [ false, %while.cond5 ], [ %cmp9, %land.rhs ]
  br i1 %16, label %while.body10, label %while.end

while.body10:                                     ; preds = %land.end
  %17 = load %struct.tNode** %pre, align 8
  %right11 = getelementptr inbounds %struct.tNode* %17, i32 0, i32 2
  %18 = load %struct.tNode** %right11, align 8
  store %struct.tNode* %18, %struct.tNode** %pre, align 8
  br label %while.cond5

while.end:                                        ; preds = %land.end
  %19 = load %struct.tNode** %pre, align 8
  %right12 = getelementptr inbounds %struct.tNode* %19, i32 0, i32 2
  %20 = load %struct.tNode** %right12, align 8
  %cmp13 = icmp eq %struct.tNode* %20, null
  br i1 %cmp13, label %if.then14, label %if.else17

if.then14:                                        ; preds = %while.end
  %21 = load %struct.tNode** %current, align 8
  %22 = load %struct.tNode** %pre, align 8
  %right15 = getelementptr inbounds %struct.tNode* %22, i32 0, i32 2
  store %struct.tNode* %21, %struct.tNode** %right15, align 8
  %23 = load %struct.tNode** %current, align 8
  %left16 = getelementptr inbounds %struct.tNode* %23, i32 0, i32 1
  %24 = load %struct.tNode** %left16, align 8
  store %struct.tNode* %24, %struct.tNode** %current, align 8
  br label %if.end22

if.else17:                                        ; preds = %while.end
  %25 = load %struct.tNode** %pre, align 8
  %right18 = getelementptr inbounds %struct.tNode* %25, i32 0, i32 2
  store %struct.tNode* null, %struct.tNode** %right18, align 8
  %26 = load %struct.tNode** %current, align 8
  %data19 = getelementptr inbounds %struct.tNode* %26, i32 0, i32 0
  %27 = load i32* %data19, align 4
  %call20 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %27)
  %28 = load %struct.tNode** %current, align 8
  %right21 = getelementptr inbounds %struct.tNode* %28, i32 0, i32 2
  %29 = load %struct.tNode** %right21, align 8
  store %struct.tNode* %29, %struct.tNode** %current, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else17, %if.then14
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then3
  br label %while.cond

while.end24:                                      ; preds = %if.then, %while.cond
  ret void
}

declare i32 @printf(i8*, ...)

define %struct.tNode* @newtNode(i32 %data) nounwind uwtable {
entry:
  %data.addr = alloca i32, align 4
  %node = alloca %struct.tNode*, align 8
  store i32 %data, i32* %data.addr, align 4
  %call = call noalias i8* @malloc(i64 24) nounwind
  %0 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %0, %struct.tNode** %node, align 8
  %1 = load i32* %data.addr, align 4
  %2 = load %struct.tNode** %node, align 8
  %data1 = getelementptr inbounds %struct.tNode* %2, i32 0, i32 0
  store i32 %1, i32* %data1, align 4
  %3 = load %struct.tNode** %node, align 8
  %left = getelementptr inbounds %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %left, align 8
  %4 = load %struct.tNode** %node, align 8
  %right = getelementptr inbounds %struct.tNode* %4, i32 0, i32 2
  store %struct.tNode* null, %struct.tNode** %right, align 8
  %5 = load %struct.tNode** %node, align 8
  ret %struct.tNode* %5
}

declare noalias i8* @malloc(i64) nounwind

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.tNode*, align 8
  store i32 0, i32* %retval
  %call = call %struct.tNode* @newtNode(i32 1)
  store %struct.tNode* %call, %struct.tNode** %root, align 8
  %call1 = call %struct.tNode* @newtNode(i32 2)
  %0 = load %struct.tNode** %root, align 8
  %left = getelementptr inbounds %struct.tNode* %0, i32 0, i32 1
  store %struct.tNode* %call1, %struct.tNode** %left, align 8
  %call2 = call %struct.tNode* @newtNode(i32 3)
  %1 = load %struct.tNode** %root, align 8
  %right = getelementptr inbounds %struct.tNode* %1, i32 0, i32 2
  store %struct.tNode* %call2, %struct.tNode** %right, align 8
  %call3 = call %struct.tNode* @newtNode(i32 4)
  %2 = load %struct.tNode** %root, align 8
  %left4 = getelementptr inbounds %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode** %left4, align 8
  %left5 = getelementptr inbounds %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* %call3, %struct.tNode** %left5, align 8
  %call6 = call %struct.tNode* @newtNode(i32 5)
  %4 = load %struct.tNode** %root, align 8
  %left7 = getelementptr inbounds %struct.tNode* %4, i32 0, i32 1
  %5 = load %struct.tNode** %left7, align 8
  %right8 = getelementptr inbounds %struct.tNode* %5, i32 0, i32 2
  store %struct.tNode* %call6, %struct.tNode** %right8, align 8
  %6 = load %struct.tNode** %root, align 8
  call void @MorrisTraversal(%struct.tNode* %6)
  ret i32 0
}
