; ModuleID = 'dfs.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Node = type { i32, %struct.Node* }
%struct.Graph = type { i32, %struct.List* }
%struct.List = type { %struct.Node* }

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@main.order = private unnamed_addr constant [4 x i32] [i32 2, i32 0, i32 1, i32 3], align 16
@.str1 = private unnamed_addr constant [62 x i8] c"Following is Depth First Traversal (starting from vertex 2):\0A\00", align 1

define %struct.Node* @createNode(i32 %data) nounwind uwtable {
entry:
  %data.addr = alloca i32, align 4
  %newNode = alloca %struct.Node*, align 8
  store i32 %data, i32* %data.addr, align 4
  %call = call noalias i8* @malloc(i64 16) nounwind
  %0 = bitcast i8* %call to %struct.Node*
  store %struct.Node* %0, %struct.Node** %newNode, align 8
  %1 = load i32* %data.addr, align 4
  %2 = load %struct.Node** %newNode, align 8
  %data1 = getelementptr inbounds %struct.Node* %2, i32 0, i32 0
  store i32 %1, i32* %data1, align 4
  %3 = load %struct.Node** %newNode, align 8
  %next = getelementptr inbounds %struct.Node* %3, i32 0, i32 1
  store %struct.Node* null, %struct.Node** %next, align 8
  %4 = load %struct.Node** %newNode, align 8
  ret %struct.Node* %4
}

declare noalias i8* @malloc(i64) nounwind

define %struct.Graph* @createGraph(i32 %vertices) nounwind uwtable {
entry:
  %vertices.addr = alloca i32, align 4
  %graph = alloca %struct.Graph*, align 8
  %i = alloca i32, align 4
  store i32 %vertices, i32* %vertices.addr, align 4
  %call = call noalias i8* @malloc(i64 16) nounwind
  %0 = bitcast i8* %call to %struct.Graph*
  store %struct.Graph* %0, %struct.Graph** %graph, align 8
  %1 = load i32* %vertices.addr, align 4
  %2 = load %struct.Graph** %graph, align 8
  %vertices1 = getelementptr inbounds %struct.Graph* %2, i32 0, i32 0
  store i32 %1, i32* %vertices1, align 4
  %3 = load i32* %vertices.addr, align 4
  %conv = sext i32 %3 to i64
  %mul = mul i64 %conv, 8
  %call2 = call noalias i8* @malloc(i64 %mul) nounwind
  %4 = bitcast i8* %call2 to %struct.List*
  %5 = load %struct.Graph** %graph, align 8
  %array = getelementptr inbounds %struct.Graph* %5, i32 0, i32 1
  store %struct.List* %4, %struct.List** %array, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32* %i, align 4
  %7 = load i32* %vertices.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.Graph** %graph, align 8
  %array4 = getelementptr inbounds %struct.Graph* %9, i32 0, i32 1
  %10 = load %struct.List** %array4, align 8
  %arrayidx = getelementptr inbounds %struct.List* %10, i64 %idxprom
  %head = getelementptr inbounds %struct.List* %arrayidx, i32 0, i32 0
  store %struct.Node* null, %struct.Node** %head, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load %struct.Graph** %graph, align 8
  ret %struct.Graph* %12
}

define void @addEdge(%struct.Graph* %graph, i32 %src, i32 %dest) nounwind uwtable {
entry:
  %graph.addr = alloca %struct.Graph*, align 8
  %src.addr = alloca i32, align 4
  %dest.addr = alloca i32, align 4
  %newNode = alloca %struct.Node*, align 8
  store %struct.Graph* %graph, %struct.Graph** %graph.addr, align 8
  store i32 %src, i32* %src.addr, align 4
  store i32 %dest, i32* %dest.addr, align 4
  %0 = load i32* %dest.addr, align 4
  %call = call %struct.Node* @createNode(i32 %0)
  store %struct.Node* %call, %struct.Node** %newNode, align 8
  %1 = load i32* %src.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.Graph** %graph.addr, align 8
  %array = getelementptr inbounds %struct.Graph* %2, i32 0, i32 1
  %3 = load %struct.List** %array, align 8
  %arrayidx = getelementptr inbounds %struct.List* %3, i64 %idxprom
  %head = getelementptr inbounds %struct.List* %arrayidx, i32 0, i32 0
  %4 = load %struct.Node** %head, align 8
  %5 = load %struct.Node** %newNode, align 8
  %next = getelementptr inbounds %struct.Node* %5, i32 0, i32 1
  store %struct.Node* %4, %struct.Node** %next, align 8
  %6 = load %struct.Node** %newNode, align 8
  %7 = load i32* %src.addr, align 4
  %idxprom1 = sext i32 %7 to i64
  %8 = load %struct.Graph** %graph.addr, align 8
  %array2 = getelementptr inbounds %struct.Graph* %8, i32 0, i32 1
  %9 = load %struct.List** %array2, align 8
  %arrayidx3 = getelementptr inbounds %struct.List* %9, i64 %idxprom1
  %head4 = getelementptr inbounds %struct.List* %arrayidx3, i32 0, i32 0
  store %struct.Node* %6, %struct.Node** %head4, align 8
  ret void
}

define void @DFS(%struct.Graph* %graph, i32 %vertex, i8* %visited) nounwind uwtable {
entry:
  %graph.addr = alloca %struct.Graph*, align 8
  %vertex.addr = alloca i32, align 4
  %visited.addr = alloca i8*, align 8
  %currentNode = alloca %struct.Node*, align 8
  %adjacentVertex = alloca i32, align 4
  store %struct.Graph* %graph, %struct.Graph** %graph.addr, align 8
  store i32 %vertex, i32* %vertex.addr, align 4
  store i8* %visited, i8** %visited.addr, align 8
  %0 = load i32* %vertex.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i8** %visited.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 %idxprom
  store i8 1, i8* %arrayidx, align 1
  %2 = load i32* %vertex.addr, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %2)
  %3 = load i32* %vertex.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %4 = load %struct.Graph** %graph.addr, align 8
  %array = getelementptr inbounds %struct.Graph* %4, i32 0, i32 1
  %5 = load %struct.List** %array, align 8
  %arrayidx2 = getelementptr inbounds %struct.List* %5, i64 %idxprom1
  %head = getelementptr inbounds %struct.List* %arrayidx2, i32 0, i32 0
  %6 = load %struct.Node** %head, align 8
  store %struct.Node* %6, %struct.Node** %currentNode, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %7 = load %struct.Node** %currentNode, align 8
  %tobool = icmp ne %struct.Node* %7, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.Node** %currentNode, align 8
  %data = getelementptr inbounds %struct.Node* %8, i32 0, i32 0
  %9 = load i32* %data, align 4
  store i32 %9, i32* %adjacentVertex, align 4
  %10 = load i32* %adjacentVertex, align 4
  %idxprom3 = sext i32 %10 to i64
  %11 = load i8** %visited.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %11, i64 %idxprom3
  %12 = load i8* %arrayidx4, align 1
  %tobool5 = trunc i8 %12 to i1
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %while.body
  %13 = load %struct.Graph** %graph.addr, align 8
  %14 = load i32* %adjacentVertex, align 4
  %15 = load i8** %visited.addr, align 8
  call void @DFS(%struct.Graph* %13, i32 %14, i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %16 = load %struct.Node** %currentNode, align 8
  %next = getelementptr inbounds %struct.Node* %16, i32 0, i32 1
  %17 = load %struct.Node** %next, align 8
  store %struct.Node* %17, %struct.Node** %currentNode, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @printf(i8*, ...)

define void @DFSTraversal(%struct.Graph* %graph, i32* %order, i32 %orderSize) nounwind uwtable {
entry:
  %graph.addr = alloca %struct.Graph*, align 8
  %order.addr = alloca i32*, align 8
  %orderSize.addr = alloca i32, align 4
  %visited = alloca i8*, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  store %struct.Graph* %graph, %struct.Graph** %graph.addr, align 8
  store i32* %order, i32** %order.addr, align 8
  store i32 %orderSize, i32* %orderSize.addr, align 4
  %0 = load %struct.Graph** %graph.addr, align 8
  %vertices = getelementptr inbounds %struct.Graph* %0, i32 0, i32 0
  %1 = load i32* %vertices, align 4
  %conv = sext i32 %1 to i64
  %mul = mul i64 %conv, 1
  %call = call noalias i8* @malloc(i64 %mul) nounwind
  store i8* %call, i8** %visited, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load %struct.Graph** %graph.addr, align 8
  %vertices1 = getelementptr inbounds %struct.Graph* %3, i32 0, i32 0
  %4 = load i32* %vertices1, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8** %visited, align 8
  %arrayidx = getelementptr inbounds i8* %6, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc14, %for.end
  %8 = load i32* %i3, align 4
  %9 = load i32* %orderSize.addr, align 4
  %cmp5 = icmp slt i32 %8, %9
  br i1 %cmp5, label %for.body7, label %for.end16

for.body7:                                        ; preds = %for.cond4
  %10 = load i32* %i3, align 4
  %idxprom8 = sext i32 %10 to i64
  %11 = load i32** %order.addr, align 8
  %arrayidx9 = getelementptr inbounds i32* %11, i64 %idxprom8
  %12 = load i32* %arrayidx9, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i8** %visited, align 8
  %arrayidx11 = getelementptr inbounds i8* %13, i64 %idxprom10
  %14 = load i8* %arrayidx11, align 1
  %tobool = trunc i8 %14 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body7
  %15 = load %struct.Graph** %graph.addr, align 8
  %16 = load i32* %i3, align 4
  %idxprom12 = sext i32 %16 to i64
  %17 = load i32** %order.addr, align 8
  %arrayidx13 = getelementptr inbounds i32* %17, i64 %idxprom12
  %18 = load i32* %arrayidx13, align 4
  %19 = load i8** %visited, align 8
  call void @DFS(%struct.Graph* %15, i32 %18, i8* %19)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body7
  br label %for.inc14

for.inc14:                                        ; preds = %if.end
  %20 = load i32* %i3, align 4
  %inc15 = add nsw i32 %20, 1
  store i32 %inc15, i32* %i3, align 4
  br label %for.cond4

for.end16:                                        ; preds = %for.cond4
  %21 = load i8** %visited, align 8
  call void @free(i8* %21) nounwind
  ret void
}

declare void @free(i8*) nounwind

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %vertices = alloca i32, align 4
  %graph = alloca %struct.Graph*, align 8
  %order = alloca [4 x i32], align 16
  %orderSize = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 4, i32* %vertices, align 4
  %0 = load i32* %vertices, align 4
  %call = call %struct.Graph* @createGraph(i32 %0)
  store %struct.Graph* %call, %struct.Graph** %graph, align 8
  %1 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %1, i32 2, i32 0)
  %2 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %2, i32 0, i32 2)
  %3 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %3, i32 1, i32 2)
  %4 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %4, i32 0, i32 1)
  %5 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %5, i32 3, i32 3)
  %6 = load %struct.Graph** %graph, align 8
  call void @addEdge(%struct.Graph* %6, i32 1, i32 3)
  %7 = bitcast [4 x i32]* %order to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast ([4 x i32]* @main.order to i8*), i64 16, i32 16, i1 false)
  store i32 4, i32* %orderSize, align 4
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([62 x i8]* @.str1, i32 0, i32 0))
  %8 = load %struct.Graph** %graph, align 8
  %arraydecay = getelementptr inbounds [4 x i32]* %order, i32 0, i32 0
  %9 = load i32* %orderSize, align 4
  call void @DFSTraversal(%struct.Graph* %8, i32* %arraydecay, i32 %9)
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind
