; ModuleID = 'loop01.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 20, i32* %a, align 4
  store i32 55, i32* %b, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end15, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end16

while.body:                                       ; preds = %while.cond
  %1 = load i32* %a, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %a, align 4
  %2 = load i32* %i, align 4
  %add1 = add nsw i32 %2, 1
  store i32 %add1, i32* %i, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.end14, %while.body
  %3 = load i32* %j, align 4
  %cmp3 = icmp slt i32 %3, 10
  br i1 %cmp3, label %while.body4, label %while.end15

while.body4:                                      ; preds = %while.cond2
  %4 = load i32* %b, align 4
  %add5 = add nsw i32 %4, 1
  store i32 %add5, i32* %b, align 4
  %5 = load i32* %j, align 4
  %add6 = add nsw i32 %5, 1
  store i32 %add6, i32* %j, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.end, %while.body4
  %6 = load i32* %c, align 4
  %cmp8 = icmp slt i32 %6, 10
  br i1 %cmp8, label %while.body9, label %while.end14

while.body9:                                      ; preds = %while.cond7
  %7 = load i32* %c, align 4
  %add10 = add nsw i32 %7, 1
  store i32 %add10, i32* %c, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body13, %while.body9
  %8 = load i32* %a, align 4
  %cmp12 = icmp sgt i32 %8, 1
  br i1 %cmp12, label %while.body13, label %while.end

while.body13:                                     ; preds = %while.cond11
  %9 = load i32* %a, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %a, align 4
  br label %while.cond11

while.end:                                        ; preds = %while.cond11
  br label %while.cond7

while.end14:                                      ; preds = %while.cond7
  br label %while.cond2

while.end15:                                      ; preds = %while.cond2
  br label %while.cond

while.end16:                                      ; preds = %while.cond
  br label %while.cond17

while.cond17:                                     ; preds = %while.body19, %while.end16
  %10 = load i32* %a, align 4
  %cmp18 = icmp slt i32 %10, 10
  br i1 %cmp18, label %while.body19, label %while.end21

while.body19:                                     ; preds = %while.cond17
  %11 = load i32* %a, align 4
  %add20 = add nsw i32 %11, 1
  store i32 %add20, i32* %a, align 4
  br label %while.cond17

while.end21:                                      ; preds = %while.cond17
  store i32 10, i32* %a, align 4
  %12 = load i32* %b, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %12)
  ret i32 0
}

declare i32 @printf(i8*, ...)
