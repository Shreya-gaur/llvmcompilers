; ModuleID = 'loop05.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"Outer Loop: Iteration %d\0A\00", align 1
@.str1 = private unnamed_addr constant [29 x i8] c"\09Inner Loop 1: Iteration %d\0A\00", align 1
@.str2 = private unnamed_addr constant [30 x i8] c"\09\09Inner Loop 2: Iteration %d\0A\00", align 1
@.str3 = private unnamed_addr constant [29 x i8] c"\09\09Result of computation: %d\0A\00", align 1
@.str4 = private unnamed_addr constant [32 x i8] c"\09\09Jumping back to Inner Loop 2\0A\00", align 1
@.str5 = private unnamed_addr constant [21 x i8] c"\09After Inner Loop 2\0A\00", align 1
@.str6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc17, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp sle i32 %0, 5
  br i1 %cmp, label %for.body, label %for.end19

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.body
  %2 = load i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 3
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %3 = load i32* %j, align 4
  %call4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str1, i32 0, i32 0), i32 %3)
  store i32 1, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body3
  %4 = load i32* %k, align 4
  %cmp6 = icmp sle i32 %4, 4
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %5 = load i32* %k, align 4
  %call8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str2, i32 0, i32 0), i32 %5)
  %6 = load i32* %i, align 4
  %7 = load i32* %j, align 4
  %mul = mul nsw i32 %6, %7
  %8 = load i32* %k, align 4
  %add = add nsw i32 %mul, %8
  store i32 %add, i32* %result, align 4
  %9 = load i32* %result, align 4
  %call9 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0), i32 %9)
  %10 = load i32* %result, align 4
  %cmp10 = icmp sgt i32 %10, 5
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  %call11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str4, i32 0, i32 0))
  br label %inner_loop_2

if.end:                                           ; preds = %for.body7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %inner_loop_2

inner_loop_2:                                     ; preds = %for.end, %if.then
  %call12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str5, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %inner_loop_2
  %12 = load i32* %j, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  %call16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0))
  br label %for.inc17

for.inc17:                                        ; preds = %for.end15
  %13 = load i32* %i, align 4
  %inc18 = add nsw i32 %13, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end19:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8*, ...)
