; ModuleID = 'find_median.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.ar1 = private unnamed_addr constant [5 x i32] [i32 1, i32 12, i32 15, i32 26, i32 38], align 16
@main.ar2 = private unnamed_addr constant [5 x i32] [i32 2, i32 13, i32 17, i32 30, i32 45], align 16
@.str = private unnamed_addr constant [13 x i8] c"Median is %d\00", align 1
@.str1 = private unnamed_addr constant [40 x i8] c"Doesn't work for arrays of unequal size\00", align 1

define i32 @getMedian(i32* %ar1, i32* %ar2, i32 %n) nounwind uwtable {
entry:
  %ar1.addr = alloca i32*, align 8
  %ar2.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %m1 = alloca i32, align 4
  %m2 = alloca i32, align 4
  store i32* %ar1, i32** %ar1.addr, align 8
  store i32* %ar2, i32** %ar2.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 -1, i32* %m1, align 4
  store i32 -1, i32* %m2, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %count, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %3 = load i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %2, %3
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %4 = load i32* %m2, align 4
  store i32 %4, i32* %m1, align 4
  %5 = load i32** %ar2.addr, align 8
  %arrayidx = getelementptr inbounds i32* %5, i64 0
  %6 = load i32* %arrayidx, align 4
  store i32 %6, i32* %m2, align 4
  br label %for.end

if.else:                                          ; preds = %for.body
  %7 = load i32* %j, align 4
  %8 = load i32* %n.addr, align 4
  %cmp2 = icmp eq i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %9 = load i32* %m2, align 4
  store i32 %9, i32* %m1, align 4
  %10 = load i32** %ar1.addr, align 8
  %arrayidx4 = getelementptr inbounds i32* %10, i64 0
  %11 = load i32* %arrayidx4, align 4
  store i32 %11, i32* %m2, align 4
  br label %for.end

if.end:                                           ; preds = %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  %12 = load i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load i32** %ar1.addr, align 8
  %arrayidx6 = getelementptr inbounds i32* %13, i64 %idxprom
  %14 = load i32* %arrayidx6, align 4
  %15 = load i32* %j, align 4
  %idxprom7 = sext i32 %15 to i64
  %16 = load i32** %ar2.addr, align 8
  %arrayidx8 = getelementptr inbounds i32* %16, i64 %idxprom7
  %17 = load i32* %arrayidx8, align 4
  %cmp9 = icmp sle i32 %14, %17
  br i1 %cmp9, label %if.then10, label %if.else13

if.then10:                                        ; preds = %if.end5
  %18 = load i32* %m2, align 4
  store i32 %18, i32* %m1, align 4
  %19 = load i32* %i, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load i32** %ar1.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %20, i64 %idxprom11
  %21 = load i32* %arrayidx12, align 4
  store i32 %21, i32* %m2, align 4
  %22 = load i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end17

if.else13:                                        ; preds = %if.end5
  %23 = load i32* %m2, align 4
  store i32 %23, i32* %m1, align 4
  %24 = load i32* %j, align 4
  %idxprom14 = sext i32 %24 to i64
  %25 = load i32** %ar2.addr, align 8
  %arrayidx15 = getelementptr inbounds i32* %25, i64 %idxprom14
  %26 = load i32* %arrayidx15, align 4
  store i32 %26, i32* %m2, align 4
  %27 = load i32* %j, align 4
  %inc16 = add nsw i32 %27, 1
  store i32 %inc16, i32* %j, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else13, %if.then10
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %28 = load i32* %count, align 4
  %inc18 = add nsw i32 %28, 1
  store i32 %inc18, i32* %count, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then3, %if.then, %for.cond
  %29 = load i32* %m1, align 4
  %30 = load i32* %m2, align 4
  %add = add nsw i32 %29, %30
  %div = sdiv i32 %add, 2
  ret i32 %div
}

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %ar1 = alloca [5 x i32], align 16
  %ar2 = alloca [5 x i32], align 16
  %n1 = alloca i32, align 4
  %n2 = alloca i32, align 4
  store i32 0, i32* %retval
  %0 = bitcast [5 x i32]* %ar1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @main.ar1 to i8*), i64 20, i32 16, i1 false)
  %1 = bitcast [5 x i32]* %ar2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([5 x i32]* @main.ar2 to i8*), i64 20, i32 16, i1 false)
  store i32 5, i32* %n1, align 4
  store i32 5, i32* %n2, align 4
  %2 = load i32* %n1, align 4
  %3 = load i32* %n2, align 4
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [5 x i32]* %ar1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [5 x i32]* %ar2, i32 0, i32 0
  %4 = load i32* %n1, align 4
  %call = call i32 @getMedian(i32* %arraydecay, i32* %arraydecay1, i32 %4)
  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0), i32 %call)
  br label %if.end

if.else:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([40 x i8]* @.str1, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call4 = call i32 @getchar()
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @printf(i8*, ...)

declare i32 @getchar()
