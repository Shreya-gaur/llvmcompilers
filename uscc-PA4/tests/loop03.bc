; ModuleID = 'loop03.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @printArray(i32* %array, i32 %size) nounwind uwtable {
entry:
  %array.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %size.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %array.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %4)
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i32** %array.addr, align 8
  %arrayidx2 = getelementptr inbounds i32* %7, i64 %idxprom1
  %8 = load i32* %arrayidx2, align 4
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %8)
  ret void
}

declare i32 @printf(i8*, ...)

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %array = alloca [5 x i32], align 16
  %x = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 5, i32* %x, align 4
  %arrayidx = getelementptr inbounds [5 x i32]* %array, i32 0, i64 0
  store i32 1, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [5 x i32]* %array, i32 0, i64 1
  store i32 1, i32* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32]* %array, i32 0, i64 2
  store i32 2, i32* %arrayidx2, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32]* %array, i32 0, i64 3
  store i32 3, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32]* %array, i32 0, i64 4
  store i32 5, i32* %arrayidx4, align 4
  %arraydecay = getelementptr inbounds [5 x i32]* %array, i32 0, i32 0
  call void @printArray(i32* %arraydecay, i32 5)
  store i32 10, i32* %x, align 4
  %0 = load i32* %x, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %0)
  ret i32 0
}
