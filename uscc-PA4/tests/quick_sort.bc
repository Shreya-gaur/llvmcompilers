; ModuleID = 'quick_sort.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.letters = private unnamed_addr constant [36 x i8] c"thequickbrownfoxjumpsoverthelazydog\00", align 16
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @partition(i8* %array, i32 %left, i32 %right, i32 %pivotIdx) nounwind uwtable {
entry:
  %array.addr = alloca i8*, align 8
  %left.addr = alloca i32, align 4
  %right.addr = alloca i32, align 4
  %pivotIdx.addr = alloca i32, align 4
  %pivotVal = alloca i8, align 1
  %storeIdx = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %array, i8** %array.addr, align 8
  store i32 %left, i32* %left.addr, align 4
  store i32 %right, i32* %right.addr, align 4
  store i32 %pivotIdx, i32* %pivotIdx.addr, align 4
  %0 = load i32* %pivotIdx.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i8** %array.addr, align 8
  %arrayidx = getelementptr inbounds i8* %1, i64 %idxprom
  %2 = load i8* %arrayidx, align 1
  store i8 %2, i8* %pivotVal, align 1
  %3 = load i32* %left.addr, align 4
  store i32 %3, i32* %storeIdx, align 4
  %4 = load i32* %left.addr, align 4
  store i32 %4, i32* %i, align 4
  %5 = load i32* %pivotIdx.addr, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i8** %array.addr, align 8
  %arrayidx2 = getelementptr inbounds i8* %6, i64 %idxprom1
  %7 = load i8* %arrayidx2, align 1
  store i8 %7, i8* %temp, align 1
  %8 = load i32* %right.addr, align 4
  %idxprom3 = sext i32 %8 to i64
  %9 = load i8** %array.addr, align 8
  %arrayidx4 = getelementptr inbounds i8* %9, i64 %idxprom3
  %10 = load i8* %arrayidx4, align 1
  %11 = load i32* %pivotIdx.addr, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load i8** %array.addr, align 8
  %arrayidx6 = getelementptr inbounds i8* %12, i64 %idxprom5
  store i8 %10, i8* %arrayidx6, align 1
  %13 = load i8* %temp, align 1
  %14 = load i32* %right.addr, align 4
  %idxprom7 = sext i32 %14 to i64
  %15 = load i8** %array.addr, align 8
  %arrayidx8 = getelementptr inbounds i8* %15, i64 %idxprom7
  store i8 %13, i8* %arrayidx8, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %16 = load i32* %i, align 4
  %17 = load i32* %right.addr, align 4
  %cmp = icmp slt i32 %16, %17
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32* %i, align 4
  %idxprom9 = sext i32 %18 to i64
  %19 = load i8** %array.addr, align 8
  %arrayidx10 = getelementptr inbounds i8* %19, i64 %idxprom9
  %20 = load i8* %arrayidx10, align 1
  %conv = sext i8 %20 to i32
  %21 = load i8* %pivotVal, align 1
  %conv11 = sext i8 %21 to i32
  %cmp12 = icmp slt i32 %conv, %conv11
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %22 = load i32* %i, align 4
  %idxprom14 = sext i32 %22 to i64
  %23 = load i8** %array.addr, align 8
  %arrayidx15 = getelementptr inbounds i8* %23, i64 %idxprom14
  %24 = load i8* %arrayidx15, align 1
  store i8 %24, i8* %temp, align 1
  %25 = load i32* %storeIdx, align 4
  %idxprom16 = sext i32 %25 to i64
  %26 = load i8** %array.addr, align 8
  %arrayidx17 = getelementptr inbounds i8* %26, i64 %idxprom16
  %27 = load i8* %arrayidx17, align 1
  %28 = load i32* %i, align 4
  %idxprom18 = sext i32 %28 to i64
  %29 = load i8** %array.addr, align 8
  %arrayidx19 = getelementptr inbounds i8* %29, i64 %idxprom18
  store i8 %27, i8* %arrayidx19, align 1
  %30 = load i8* %temp, align 1
  %31 = load i32* %storeIdx, align 4
  %idxprom20 = sext i32 %31 to i64
  %32 = load i8** %array.addr, align 8
  %arrayidx21 = getelementptr inbounds i8* %32, i64 %idxprom20
  store i8 %30, i8* %arrayidx21, align 1
  %33 = load i32* %storeIdx, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %storeIdx, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %34 = load i32* %i, align 4
  %inc22 = add nsw i32 %34, 1
  store i32 %inc22, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %35 = load i32* %storeIdx, align 4
  %idxprom23 = sext i32 %35 to i64
  %36 = load i8** %array.addr, align 8
  %arrayidx24 = getelementptr inbounds i8* %36, i64 %idxprom23
  %37 = load i8* %arrayidx24, align 1
  store i8 %37, i8* %temp, align 1
  %38 = load i32* %right.addr, align 4
  %idxprom25 = sext i32 %38 to i64
  %39 = load i8** %array.addr, align 8
  %arrayidx26 = getelementptr inbounds i8* %39, i64 %idxprom25
  %40 = load i8* %arrayidx26, align 1
  %41 = load i32* %storeIdx, align 4
  %idxprom27 = sext i32 %41 to i64
  %42 = load i8** %array.addr, align 8
  %arrayidx28 = getelementptr inbounds i8* %42, i64 %idxprom27
  store i8 %40, i8* %arrayidx28, align 1
  %43 = load i8* %temp, align 1
  %44 = load i32* %right.addr, align 4
  %idxprom29 = sext i32 %44 to i64
  %45 = load i8** %array.addr, align 8
  %arrayidx30 = getelementptr inbounds i8* %45, i64 %idxprom29
  store i8 %43, i8* %arrayidx30, align 1
  %46 = load i32* %storeIdx, align 4
  ret i32 %46
}

define void @quicksort(i8* %array, i32 %left, i32 %right) nounwind uwtable {
entry:
  %array.addr = alloca i8*, align 8
  %left.addr = alloca i32, align 4
  %right.addr = alloca i32, align 4
  %pivotIdx = alloca i32, align 4
  store i8* %array, i8** %array.addr, align 8
  store i32 %left, i32* %left.addr, align 4
  store i32 %right, i32* %right.addr, align 4
  %0 = load i32* %left.addr, align 4
  %1 = load i32* %right.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32* %left.addr, align 4
  %3 = load i32* %right.addr, align 4
  %4 = load i32* %left.addr, align 4
  %sub = sub nsw i32 %3, %4
  %div = sdiv i32 %sub, 2
  %add = add nsw i32 %2, %div
  store i32 %add, i32* %pivotIdx, align 4
  %5 = load i8** %array.addr, align 8
  %6 = load i32* %left.addr, align 4
  %7 = load i32* %right.addr, align 4
  %8 = load i32* %pivotIdx, align 4
  %call = call i32 @partition(i8* %5, i32 %6, i32 %7, i32 %8)
  store i32 %call, i32* %pivotIdx, align 4
  %9 = load i8** %array.addr, align 8
  %10 = load i32* %left.addr, align 4
  %11 = load i32* %pivotIdx, align 4
  %sub1 = sub nsw i32 %11, 1
  call void @quicksort(i8* %9, i32 %10, i32 %sub1)
  %12 = load i8** %array.addr, align 8
  %13 = load i32* %pivotIdx, align 4
  %add2 = add nsw i32 %13, 1
  %14 = load i32* %right.addr, align 4
  call void @quicksort(i8* %12, i32 %add2, i32 %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %letters = alloca [36 x i8], align 16
  store i32 0, i32* %retval
  %0 = bitcast [36 x i8]* %letters to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds ([36 x i8]* @main.letters, i32 0, i32 0), i64 36, i32 16, i1 false)
  %arraydecay = getelementptr inbounds [36 x i8]* %letters, i32 0, i32 0
  call void @quicksort(i8* %arraydecay, i32 0, i32 34)
  %arraydecay1 = getelementptr inbounds [36 x i8]* %letters, i32 0, i32 0
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

declare i32 @printf(i8*, ...)
