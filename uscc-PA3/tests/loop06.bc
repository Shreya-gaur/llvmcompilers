; ModuleID = 'loop06.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [26 x i8] c"Outer Loop: Iteration %d\0A\00", align 1
@.str1 = private unnamed_addr constant [27 x i8] c"\09Inner Loop: Iteration %d\0A\00", align 1
@.str2 = private unnamed_addr constant [28 x i8] c"\09Result of computation: %d\0A\00", align 1
@.str3 = private unnamed_addr constant [29 x i8] c"\09Jumping back to Outer Loop\0A\00", align 1

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 1, i32* %i, align 4
  br label %outer_loop

outer_loop:                                       ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.end, %outer_loop
  %0 = load i32* %i, align 4
  %cmp = icmp sle i32 %0, 5
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %1 = load i32* %i, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 1, i32* %j, align 4
  br label %while.cond1

while.cond1:                                      ; preds = %if.end, %while.body
  %2 = load i32* %j, align 4
  %cmp2 = icmp sle i32 %2, 3
  br i1 %cmp2, label %while.body3, label %while.end

while.body3:                                      ; preds = %while.cond1
  %3 = load i32* %j, align 4
  %call4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str1, i32 0, i32 0), i32 %3)
  %4 = load i32* %i, align 4
  %5 = load i32* %j, align 4
  %mul = mul nsw i32 %4, %5
  store i32 %mul, i32* %result, align 4
  %6 = load i32* %result, align 4
  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str2, i32 0, i32 0), i32 %6)
  %7 = load i32* %result, align 4
  %cmp6 = icmp sgt i32 %7, 5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body3
  %call7 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str3, i32 0, i32 0))
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %outer_loop

if.end:                                           ; preds = %while.body3
  %9 = load i32* %j, align 4
  %inc8 = add nsw i32 %9, 1
  store i32 %inc8, i32* %j, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %10 = load i32* %i, align 4
  %inc9 = add nsw i32 %10, 1
  store i32 %inc9, i32* %i, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8*, ...)
