; ModuleID = 'insertion_sort.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.arr = private unnamed_addr constant [5 x i32] [i32 12, i32 11, i32 13, i32 5, i32 6], align 16

define void @insertionSort(i32* %arr, i32 %n) nounwind uwtable {
entry:
  %arr.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %key = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %arr.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  store i32 %4, i32* %key, align 4
  %5 = load i32* %i, align 4
  %sub = sub nsw i32 %5, 1
  store i32 %sub, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %6 = load i32* %j, align 4
  %cmp1 = icmp sge i32 %6, 0
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %7 = load i32* %j, align 4
  %idxprom2 = sext i32 %7 to i64
  %8 = load i32** %arr.addr, align 8
  %arrayidx3 = getelementptr inbounds i32* %8, i64 %idxprom2
  %9 = load i32* %arrayidx3, align 4
  %10 = load i32* %key, align 4
  %cmp4 = icmp sgt i32 %9, %10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load i32* %j, align 4
  %idxprom5 = sext i32 %12 to i64
  %13 = load i32** %arr.addr, align 8
  %arrayidx6 = getelementptr inbounds i32* %13, i64 %idxprom5
  %14 = load i32* %arrayidx6, align 4
  %15 = load i32* %j, align 4
  %add = add nsw i32 %15, 1
  %idxprom7 = sext i32 %add to i64
  %16 = load i32** %arr.addr, align 8
  %arrayidx8 = getelementptr inbounds i32* %16, i64 %idxprom7
  store i32 %14, i32* %arrayidx8, align 4
  %17 = load i32* %j, align 4
  %sub9 = sub nsw i32 %17, 1
  store i32 %sub9, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %18 = load i32* %key, align 4
  %19 = load i32* %j, align 4
  %add10 = add nsw i32 %19, 1
  %idxprom11 = sext i32 %add10 to i64
  %20 = load i32** %arr.addr, align 8
  %arrayidx12 = getelementptr inbounds i32* %20, i64 %idxprom11
  store i32 %18, i32* %arrayidx12, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %21 = load i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

define void @printArray(i32* %arr, i32 %n) nounwind uwtable {
entry:
  %arr.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32** %arr.addr, align 8
  %arrayidx = getelementptr inbounds i32* %3, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)

define i32 @main() nounwind uwtable {
entry:
  %retval = alloca i32, align 4
  %arr = alloca [5 x i32], align 16
  %n = alloca i32, align 4
  store i32 0, i32* %retval
  %0 = bitcast [5 x i32]* %arr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @main.arr to i8*), i64 20, i32 16, i1 false)
  store i32 5, i32* %n, align 4
  %arraydecay = getelementptr inbounds [5 x i32]* %arr, i32 0, i32 0
  %1 = load i32* %n, align 4
  call void @insertionSort(i32* %arraydecay, i32 %1)
  %arraydecay1 = getelementptr inbounds [5 x i32]* %arr, i32 0, i32 0
  %2 = load i32* %n, align 4
  call void @printArray(i32* %arraydecay1, i32 %2)
  ret i32 0
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind
